/**
 * HW2 Part 1 - Coding with bases
 
 * @author Antonio Calabrese
 * 
 * *** NOTE: The rules are different for each java file! ***
 *
 * You may NOT use any of the following:
 * - Any functions found in Java libraries (especially the Math library)
 *     - Example Math.pow, Integer.bitCount, String.valueOf, etc.
 *     - Basically, any function that does everything for you. The purpose of this
 *       homework is to learn how to do these operations yourself, and the Java API!
 *     - The only exception to this rule is String.charAt to get a character from a
 *       String, and you may use String.length to get the size of the string.
 *     - Any Java 7 feature / standard library function (we will be grading using Java 6)
 *     
 * - You may not implement any Java library functions as helpers to use in other functions.
 *     
 * - String concatenation with a number for more than one digit.
 *     - For example, "" + 123 is banned. "" + 6 is allowed, though.
 *     
 * - You may only use 2 if-statements max.
 *     - This means you may have 2 separate conditions, making this okay:
 *     
 *     if(cond1) {
 *         code;
 *     } else {
 *         moreCode;
 *     }
 *     if(cond2) {
 *         code;
 *     } else {
 *         modeCode;
 *     }
 *     
 * - You may not use a switch statement.
 *     
 * - Recursion is not allowed.
 * 
 * - You may not reuse any function to implement another function.
 */
public class HW2Bases
{
	/**
	 * strdtoi - Decimal String to int
	 *
	 * Convert a string containing ASCII characters (in decimal) to an int.
	 * You do not have to handle negative numbers. The Strings we will pass in will be
	 * valid decimal numbers, and able to fit in a 32-bit signed integer.
	 * 
	 * Example: strdtoi("123"); // => 123
	 */
	public static int strdtoi(String decimal)
	{
		/* 
		 * The basic set up for the next three methods is to basically check the value at a given index
		 * convert that character to its ASCII representation and subtract the appropriate value so that
		 * it matches correctly. When going through again, the sum is multiplied by the base to represent
		 * a larger number.
		 */
		final int ASCII_CUTOFF = 48;
		final int BASE = 10;
		int sum = 0;
		for(int i = 0 ; i < decimal.length() ; i++){
			sum *= BASE;
			sum += ((int) decimal.charAt(i)) - ASCII_CUTOFF;//get the ascii value, then subtract the cutoff.
		}
		return sum;
	}

	/**
	 * strbtoi - Binary String to int
	 *
	 * Convert a string containing ASCII characters (in binary) to an int.
	 * You do not have to handle negative numbers. The Strings we will pass in will be
	 * valid binary numbers, and able to fit in a 32-bit signed integer.
	 * 
	 * Example: strbtoi("111"); // => 7
	 */
	public static int strbtoi(String binary)
	{
		final int ASCII_CUTOFF = 48;
		final int BASE = 2;
		int sum = 0;
		for(int i = 0 ; i < binary.length() ; i++){
			sum *= BASE;
			sum += ((int) binary.charAt(i)) - ASCII_CUTOFF;//get the ascii value, then subtract the cutoff.
		}
		return sum;
	}

	/**
	 * strxtoi - Hexadecimal String to int
	 *
	 * Convert a string containing ASCII characters (in hex) to an int.
	 * You do not have to handle negative numbers. The Strings we will pass in will be
	 * valid hexadecimal numbers, and able to fit in a 32-bit signed integer.
	 * 
	 * Example: strxtoi("A6"); // => 166
	 */
	public static int strxtoi(String hex)
	{
		final int ASCII_CUTOFF_INTS = 48;
		final int ASCII_CUTOFF_LETTERS = 65;
		final int ASCII_SUBTRACT_LETTERS = 55;
		final int BASE = 16;
		int sum = 0;
		for(int i = 0 ; i < hex.length() ; i++){
			sum *= BASE;
			int val = (int) hex.charAt(i);
			if(val >= ASCII_CUTOFF_LETTERS){ // if a letter
				sum += val - ASCII_SUBTRACT_LETTERS;
			} else{ // if a digit
				sum += val - ASCII_CUTOFF_INTS;//get the ascii value, then subtract the cutoff.
			}
		}
		return sum;
	}

	/**
	 * itostrb - int to Binary String
	 *
	 * Convert a int into a String containing ASCII characters (in binary).
	 * You do not have to handle negative numbers.
	 * The String returned should contain the minimum number of characters necessary to
	 * represent the number that was passed in.
	 * 
	 * Example: itostrb(7); // => "111"
	 */
	public static String itostrb(int binary)
	{
		/*
		 * The idea for this one and the next method is that we continually find the remainder if we divided the number
		 * by the base, this is the digit at the given space, adding that to the appropriate spot in the result. Once we
		 * add to the string, we divide the number by its base until it reaches 0.
		 */
		final int BASE = 2;
		final int ASCII = 48;
		String result = "";
		if(binary == 0){
			return "0";
		}
		do{
			result = (char) ((binary % BASE) + ASCII) + result;
			binary /= BASE;
		}while(binary > 0);
		return result;
	}

	/**
	 * itostrx - int to Hexadecimal String
	 *
	 * Convert a int into a String containing ASCII characters (in hexadecimal).
	 * You do not have to handle negative numbers.
	 * The String returned should contain the minimum number of characters necessary to
	 * represent the number that was passed in.
	 * 
	 * Example: itostrx(166); // => "A6"
	 */
	public static String itostrx(int hex)
	{
		final int BASE = 16;
		final int ASCII_DIGITS = 48;
		final int ASCII_LETTERS = 55;
		final int CUTOFF = 10;
		String result = "";
		while(hex > 0){
			int remainder = (hex % BASE);
			if(remainder >= CUTOFF){// If it is a letter
				result = (char) (remainder + ASCII_LETTERS) + result;
			} else{ //if it is a normal digit.
				result = (char) ((hex % BASE) + ASCII_DIGITS) + result;
			}
			hex /= BASE;
		}
		return result;
	}
}
